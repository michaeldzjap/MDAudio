#include <catch2/catch_test_macros.hpp>
#include "HannOscillator.hpp"
#include "tables.hpp"

using md_audio::HannOscillator;
using md_audio::hann_table;

TEST_CASE("table oscillator can read a single period of a hann function", "[HannOscillator]") {
    constexpr auto SAMPLE_RATE = 44100.;

    HannOscillator::set_sample_rate(SAMPLE_RATE);

    SECTION("a frequency equal to the sample rate divided by the table size returns uninterpolated table values") {
        HannOscillator osc(SAMPLE_RATE / TABLE_SIZE);

        for (std::size_t i = 0; i < TABLE_SIZE + 1; i++)
            REQUIRE(osc.process() == hann_table[i]);
    }
    SECTION("a frequency equal to twice the sample rate divided by the table size returns interpolated table values") {
        HannOscillator osc(2. * SAMPLE_RATE / TABLE_SIZE);

        constexpr std::array<double, TABLE_SIZE / 2 + 1> expected = {
            0., 0.00015059065189788992, 0.00060227189741380368, 0.00135477166065489196, 0.00240763666390155688, 0.00376023270064500086, 0.00541174501760951360, 0.00736117880552937792, 0.00960735979838477604, 0.01214893498073572713, 0.01498437340272800247, 0.01811196710228006254, 0.02152983213389556699, 0.02523590970348166609, 0.02922796740848960725, 0.03350360058263055635, 0.03806023374435661688, 0.04289512214823467534, 0.04800535343827833090, 0.05338784940224233777, 0.05903936782582247522, 0.06495650444564429749, 0.07113569499986395483, 0.07757321737514644155, 0.08426519384872735441, 0.09120759342420815818, 0.09839623425967757020, 0.10582678618669685844, 0.11349477331863151719, 0.12139557674675773014, 0.12952443732252041930, 0.13787645852426652637, 0.14644660940672624139, 0.15522972763146652975, 0.16422052257649077944, 0.17341357852311159449, 0.18280335791817725610, 0.19238420470968659037, 0.20215034775378326604, 0.21209590429107733067, 0.22221488349019888342, 0.23250119005645136783, 0.24294862790338914160, 0.25355090388510798105, 0.26430163158700109571, 0.27519433517269675793, 0.28622245328485890203, 0.29737934299750512501, 0.30865828381745508135, 0.32005248173250583354, 0.33155507330389000220, 0.34315912980055424120, 0.35485766137276880672, 0.36664362126255084506, 0.37850991004836803677, 0.39044937992156503181, 0.40245483899193584820, 0.41451905561984930815, 0.42663476277231909828, 0.43879466240039194380, 0.45099142983521961492, 0.46321771820016627297, 0.47546616283629083988, 0.48772938573854396349, 0.49999999999999988898, 0.51227061426145603651, 0.52453383716370893808, 0.53678228179983356050, 0.54900857016478010753, 0.56120533759960800069, 0.57336523722768073519, 0.58548094438015052532, 0.59754516100806398526, 0.60955062007843474614, 0.62149008995163190772, 0.63335637873744909943, 0.64514233862723102675, 0.65684087019944570329, 0.66844492669610999780, 0.67994751826749411094, 0.69134171618254469660, 0.70262065700249476397, 0.71377754671514093143, 0.72480566482730335309, 0.73569836841299895980, 0.74644909611489196344, 0.75705137209661077513, 0.76749880994354835462, 0.77778511650980097780, 0.78790409570892261382, 0.79784965224621673396, 0.80761579529031335412, 0.81719664208182274390, 0.82658642147688843327, 0.83577947742350922056, 0.84477027236853352576, 0.85355339059327373086, 0.86212354147573333485, 0.87047556267747949743, 0.87860442325324239476, 0.88650522668136855220, 0.89417321381330305829, 0.90160376574032241592, 0.90879240657579163365, 0.91573480615127278437, 0.92242678262485344742, 0.92886430500013594802, 0.93504349555435561925, 0.94096063217417746927, 0.94661215059775749570, 0.95199464656172172461, 0.95710487785176534548, 0.96193976625564336924, 0.96649639941736931181, 0.97077203259151034764, 0.97476409029651844840, 0.97847016786610452321, 0.98188803289771986460, 0.98501562659727193161, 0.98785106501926434053, 0.99039264020161510427, 0.99263882119447055530, 0.99458825498239045171, 0.99623976729935492802, 0.99759236333609846437, 0.99864522833934521451, 0.99939772810258620250, 0.99984940934810206947, 1., 0.99984940934810206947, 0.99939772810258620250, 0.99864522833934521451, 0.99759236333609846437, 0.99623976729935492802, 0.99458825498239045171, 0.99263882119447055530, 0.99039264020161532631, 0.98785106501926434053, 0.98501562659727193161, 0.98188803289771986460, 0.97847016786610452321, 0.97476409029651844840, 0.97077203259151034764, 0.96649639941736931181, 0.96193976625564336924, 0.95710487785176534548, 0.95199464656172172461, 0.94661215059775771774, 0.94096063217417746927, 0.93504349555435561925, 0.92886430500013594802, 0.92242678262485366947, 0.91573480615127278437, 0.90879240657579185569, 0.90160376574032241592, 0.89417321381330328034, 0.88650522668136855220, 0.87860442325324239476, 0.87047556267747949743, 0.86212354147573355689, 0.85355339059327373086, 0.84477027236853352576, 0.83577947742350922056, 0.82658642147688854429, 0.81719664208182296594, 0.80761579529031357616, 0.79784965224621651192, 0.78790409570892261382, 0.77778511650980119985, 0.76749880994354857666, 0.75705137209661088615, 0.74644909611489218548, 0.73569836841299895980, 0.72480566482730335309, 0.71377754671514126450, 0.70262065700249520805, 0.69134171618254525171, 0.67994751826749411094, 0.66844492669610999780, 0.65684087019944570329, 0.64514233862723124879, 0.63335637873744921045, 0.62149008995163201874, 0.60955062007843507921, 0.59754516100806431833, 0.58548094438015085839, 0.57336523722768129030, 0.56120533759960800069, 0.54900857016478010753, 0.53678228179983367152, 0.52453383716370916012, 0.51227061426145625855, 0.50000000000000011102, 0.48772938573854396349, 0.47546616283629117294, 0.46321771820016655052, 0.45099142983521989247, 0.43879466240039222136, 0.42663476277231898726, 0.41451905561984930815, 0.40245483899193584820, 0.39044937992156503181, 0.37850991004836814779, 0.36664362126255084506, 0.35485766137276897325, 0.34315912980055440773, 0.33155507330389016873, 0.32005248173250622212, 0.30865828381745508135, 0.29737934299750501399, 0.28622245328485890203, 0.27519433517269675793, 0.26430163158700120674, 0.25355090388510798105, 0.24294862790338925262, 0.23250119005645153436, 0.22221488349019904995, 0.21209590429107752496, 0.20215034775378357135, 0.19238420470968650711, 0.18280335791817720059, 0.17341357852311159449, 0.16422052257649077944, 0.15522972763146658526, 0.14644660940672629690, 0.13787645852426660964, 0.12952443732252058584, 0.12139557674675788279, 0.11349477331863166985, 0.10582678618669703885, 0.09839623425967750081, 0.09120759342420813043, 0.08426519384872735441, 0.07757321737514646931, 0.07113569499986401035, 0.06495650444564435300, 0.05903936782582255849, 0.05338784940224242798, 0.04800535343827843499, 0.04289512214823479330, 0.03806023374435674178, 0.03350360058263053553, 0.02922796740848959685, 0.02523590970348166609, 0.02152983213389558434, 0.01811196710228009030, 0.01498437340272804064, 0.01214893498073577049, 0.00960735979838482114, 0.00736117880552942302, 0.00541174501760956043, 0.00376023270064499088, 0.00240763666390155298, 0.00135477166065489196, 0.00060227189741380552, 0.00015059065189789193, 0.,
        };

        for (std::size_t i = 0; i < TABLE_SIZE / 2 + 1; i++)
            REQUIRE(osc.process() == expected[i]);
    }
}
