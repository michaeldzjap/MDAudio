#include <catch2/catch_approx.hpp>
#include <catch2/catch_test_macros.hpp>
#include "SineOscillator.hpp"
#include "tables.hpp"

using Catch::Approx;
using md_audio::SineOscillator;
using md_audio::sine_table;

TEST_CASE("table oscillator can read a single period of a sine function", "[SineOscillator]") {
    constexpr auto SAMPLE_RATE = 44100.;

    SineOscillator::set_sample_rate(SAMPLE_RATE);

    SECTION("a frequency equal to the sample rate divided by the table size returns uninterpolated table values") {
        SineOscillator osc(SAMPLE_RATE / TABLE_SIZE);

        for (std::size_t i = 0; i < TABLE_SIZE + 1; i++)
            REQUIRE(osc.process() == Approx(sine_table[i]).margin(1e-9));
    }
    SECTION("a frequency equal to twice the sample rate divided by the table size returns interpolated table values") {
        SineOscillator osc(2. * SAMPLE_RATE / TABLE_SIZE);

        constexpr std::array<double, TABLE_SIZE / 2 + 1> expected = {
            0., 0.02454122852291228812, 0.04906767432741801493, 0.07356456359966742631, 0.09801714032956060363, 0.12241067519921619566, 0.14673047445536174793, 0.17096188876030121717, 0.19509032201612824808, 0.21910124015686979759, 0.24298017990326387094, 0.26671275747489836538, 0.29028467725446233105, 0.31368174039889146210, 0.33688985339222005111, 0.35989503653498811087, 0.38268343236508978178, 0.40524131400498980549, 0.42755509343028208491, 0.44961132965460653965, 0.47139673682599764204, 0.49289819222978403790, 0.51410274419322166128, 0.53499761988709715332, 0.55557023301960217765, 0.57580819141784533866, 0.59569930449243324588, 0.61523159058062681925, 0.63439328416364548779, 0.65317284295377675551, 0.67155895484701833009, 0.68954054473706682948, 0.70710678118654746172, 0.72424708295146689174, 0.74095112535495899486, 0.75720884650648445646, 0.77301045336273688235, 0.78834642762660622761, 0.80320753148064483184, 0.81758481315158371139, 0.83146961230254512465, 0.84485356524970700587, 0.85772861000027211809, 0.87008699110871134952, 0.88192126434835493853, 0.89322430119551532446, 0.90398929312344333820, 0.91420975570353069095, 0.92387953251128673848, 0.93299279883473884567, 0.94154406518302080631, 0.94952818059303667475, 0.95694033573220882438, 0.96377606579543984022, 0.97003125319454397424, 0.97570213003852845901, 0.98078528040323043058, 0.98527764238894122162, 0.98917650996478101444, 0.99247953459870996706, 0.99518472667219681771, 0.99729045667869020697, 0.99879545620517240501, 0.99969881869620424997, 1., 0.99969881869620424997, 0.99879545620517240501, 0.99729045667869020697, 0.99518472667219692873, 0.99247953459870996706, 0.98917650996478101444, 0.98527764238894133264, 0.98078528040323043058, 0.97570213003852857003, 0.97003125319454397424, 0.96377606579543984022, 0.95694033573220893540, 0.94952818059303667475, 0.94154406518302080631, 0.93299279883473895669, 0.92387953251128673848, 0.91420975570353069095, 0.90398929312344344922, 0.89322430119551543548, 0.88192126434835504956, 0.87008699110871146054, 0.85772861000027211809, 0.84485356524970722791, 0.83146961230254545772, 0.81758481315158371139, 0.80320753148064494287, 0.78834642762660633863, 0.77301045336273710440, 0.75720884650648478953, 0.74095112535495899486, 0.72424708295146700276, 0.70710678118654757274, 0.68954054473706705153, 0.67155895484701855214, 0.65317284295377697756, 0.63439328416364548779, 0.61523159058062693028, 0.59569930449243346793, 0.57580819141784544968, 0.55557023301960251072, 0.53499761988709715332, 0.51410274419322177231, 0.49289819222978414892, 0.47139673682599780857, 0.44961132965460687272, 0.42755509343028241798, 0.40524131400498986100, 0.38268343236508983729, 0.35989503653498833291, 0.33688985339222027315, 0.31368174039889179516, 0.29028467725446233105, 0.26671275747489847641, 0.24298017990326403748, 0.21910124015687001964, 0.19509032201612858115, 0.17096188876030118942, 0.14673047445536180344, 0.12241067519921634832, 0.09801714032956083955, 0.07356456359966774550, 0.04906767432741841739, 0.02454122852291232629, 0.00000000000000012246, -0.02454122852291208343, -0.04906767432741772350, -0.07356456359966705161, -0.09801714032956058975, -0.12241067519921609852, -0.14673047445536158140, -0.17096188876030096737, -0.19509032201612794277, -0.21910124015686982535, -0.24298017990326381543, -0.26671275747489825436, -0.29028467725446216452, -0.31368174039889118454, -0.33688985339221966253, -0.35989503653498811087, -0.38268343236508967076, -0.40524131400498969446, -0.42755509343028180735, -0.44961132965460626210, -0.47139673682599764204, -0.49289819222978392688, -0.51410274419322155026, -0.53499761988709693128, -0.55557023301960195560, -0.57580819141784489457, -0.59569930449243324588, -0.61523159058062670823, -0.63439328416364526575, -0.65317284295377653347, -0.67155895484701810805, -0.68954054473706682948, -0.70710678118654746172, -0.72424708295146666970, -0.74095112535495877282, -0.75720884650648423442, -0.77301045336273666031, -0.78834642762660589455, -0.80320753148064449878, -0.81758481315158371139, -0.83146961230254523567, -0.84485356524970711689, -0.85772861000027200706, -0.87008699110871134952, -0.88192126434835493853, -0.89322430119551521344, -0.90398929312344311615, -0.91420975570353046891, -0.92387953251128651644, -0.93299279883473862363, -0.94154406518302080631, -0.94952818059303667475, -0.95694033573220882438, -0.96377606579543984022, -0.97003125319454397424, -0.97570213003852845901, -0.98078528040323031956, -0.98527764238894111060, -0.98917650996478090342, -0.99247953459870996706, -0.99518472667219692873, -0.99729045667869020697, -0.99879545620517240501, -0.99969881869620424997, -1., -0.99969881869620424997, -0.99879545620517240501, -0.99729045667869020697, -0.99518472667219692873, -0.99247953459871007809, -0.98917650996478112546, -0.98527764238894122162, -0.98078528040323043058, -0.97570213003852857003, -0.97003125319454397424, -0.96377606579543995124, -0.95694033573220893540, -0.94952818059303678577, -0.94154406518302091733, -0.93299279883473906771, -0.92387953251128696053, -0.91420975570353091300, -0.90398929312344333820, -0.89322430119551532446, -0.88192126434835504956, -0.87008699110871146054, -0.85772861000027222911, -0.84485356524970733894, -0.83146961230254556874, -0.81758481315158404445, -0.80320753148064527593, -0.78834642762660667170, -0.77301045336273743747, -0.75720884650648456748, -0.74095112535495921691, -0.72424708295146711379, -0.70710678118654768376, -0.68954054473706716255, -0.67155895484701866316, -0.65317284295377708858, -0.63439328416364593188, -0.61523159058062737437, -0.59569930449243391202, -0.57580819141784522763, -0.55557023301960217765, -0.53499761988709726435, -0.51410274419322188333, -0.49289819222978425994, -0.47139673682599791960, -0.44961132965460698374, -0.42755509343028252900, -0.40524131400499041611, -0.38268343236509039240, -0.35989503653498883251, -0.33688985339221999560, -0.31368174039889151761, -0.29028467725446244208, -0.26671275747489858743, -0.24298017990326417626, -0.21910124015687015842, -0.19509032201612871993, -0.17096188876030177228, -0.14673047445536238631, -0.12241067519921691731, -0.09801714032956139466, -0.07356456359966742631, -0.04906767432741809126, -0.02454122852291245119, 0.,
        };

        for (std::size_t i = 0; i < TABLE_SIZE / 2 + 1; i++)
            REQUIRE(osc.process() == expected[i]);
    }
}
