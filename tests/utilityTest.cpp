#include <catch2/catch_approx.hpp>
#include <catch2/catch_test_macros.hpp>
#include "tables.hpp"
#include "utility.hpp"

using Catch::Approx;
using md_audio::utility::clip;
using md_audio::utility::interpolate_cubic;
using md_audio::utility::interpolate_linear;
using md_audio::utility::lookup;
using md_audio::utility::next_power_of_two;
using md_audio::TABLE_SIZE;

TEST_CASE("clipped values are computed", "[clip]") {
    REQUIRE(clip(0, 1, 2) == 1);
    REQUIRE(clip(3, 1, 2) == 2);
    REQUIRE(clip(1.5, 1.6, 1.8) == 1.6);
    REQUIRE(clip<double>(3.4, 2, 3) == 3.);
}
TEST_CASE("cubic interpolated values are computed", "[interpolate_cubic]") {
    REQUIRE(interpolate_cubic(.0, .1, .2, .3, .4) == .2);
    REQUIRE(interpolate_cubic(.5, .1, .2, .3, .4) == .25);
    REQUIRE(interpolate_cubic(.5, .4, .3, .2, .1) == .25);
}
TEST_CASE("linear interpolated values are computed", "[interpolate_linear]") {
    REQUIRE(interpolate_linear(.0, .1, .2) == .1);
    REQUIRE(interpolate_linear(.5, .1, .2) == Approx(.15));
    REQUIRE(interpolate_linear(.5, .2, .1) == Approx(.15));
}
TEST_CASE("values can be looked up in a table", "[lookup]") {
    constexpr std::array<double, TABLE_SIZE + 1> table = {
        0.000000000, 0.001953125, 0.003906250, 0.005859375, 0.007812500, 0.009765625, 0.011718750, 0.013671875, 0.015625000, 0.017578125, 0.019531250, 0.021484375, 0.023437500, 0.025390625, 0.027343750, 0.029296875, 0.031250000, 0.033203125, 0.035156250, 0.037109375, 0.039062500, 0.041015625, 0.042968750, 0.044921875, 0.046875000, 0.048828125, 0.050781250, 0.052734375, 0.054687500, 0.056640625, 0.058593750, 0.060546875, 0.062500000, 0.064453125, 0.066406250, 0.068359375, 0.070312500, 0.072265625, 0.074218750, 0.076171875, 0.078125000, 0.080078125, 0.082031250, 0.083984375, 0.085937500, 0.087890625, 0.089843750, 0.091796875, 0.093750000, 0.095703125, 0.097656250, 0.099609375, 0.101562500, 0.103515625, 0.105468750, 0.107421875, 0.109375000, 0.111328125, 0.113281250, 0.115234375, 0.117187500, 0.119140625, 0.121093750, 0.123046875, 0.125000000, 0.126953125, 0.128906250, 0.130859375, 0.132812500, 0.134765625, 0.136718750, 0.138671875, 0.140625000, 0.142578125, 0.144531250, 0.146484375, 0.148437500, 0.150390625, 0.152343750, 0.154296875, 0.156250000, 0.158203125, 0.160156250, 0.162109375, 0.164062500, 0.166015625, 0.167968750, 0.169921875, 0.171875000, 0.173828125, 0.175781250, 0.177734375, 0.179687500, 0.181640625, 0.183593750, 0.185546875, 0.187500000, 0.189453125, 0.191406250, 0.193359375, 0.195312500, 0.197265625, 0.199218750, 0.201171875, 0.203125000, 0.205078125, 0.207031250, 0.208984375, 0.210937500, 0.212890625, 0.214843750, 0.216796875, 0.218750000, 0.220703125, 0.222656250, 0.224609375, 0.226562500, 0.228515625, 0.230468750, 0.232421875, 0.234375000, 0.236328125, 0.238281250, 0.240234375, 0.242187500, 0.244140625, 0.246093750, 0.248046875, 0.250000000, 0.251953125, 0.253906250, 0.255859375, 0.257812500, 0.259765625, 0.261718750, 0.263671875, 0.265625000, 0.267578125, 0.269531250, 0.271484375, 0.273437500, 0.275390625, 0.277343750, 0.279296875, 0.281250000, 0.283203125, 0.285156250, 0.287109375, 0.289062500, 0.291015625, 0.292968750, 0.294921875, 0.296875000, 0.298828125, 0.300781250, 0.302734375, 0.304687500, 0.306640625, 0.308593750, 0.310546875, 0.312500000, 0.314453125, 0.316406250, 0.318359375, 0.320312500, 0.322265625, 0.324218750, 0.326171875, 0.328125000, 0.330078125, 0.332031250, 0.333984375, 0.335937500, 0.337890625, 0.339843750, 0.341796875, 0.343750000, 0.345703125, 0.347656250, 0.349609375, 0.351562500, 0.353515625, 0.355468750, 0.357421875, 0.359375000, 0.361328125, 0.363281250, 0.365234375, 0.367187500, 0.369140625, 0.371093750, 0.373046875, 0.375000000, 0.376953125, 0.378906250, 0.380859375, 0.382812500, 0.384765625, 0.386718750, 0.388671875, 0.390625000, 0.392578125, 0.394531250, 0.396484375, 0.398437500, 0.400390625, 0.402343750, 0.404296875, 0.406250000, 0.408203125, 0.410156250, 0.412109375, 0.414062500, 0.416015625, 0.417968750, 0.419921875, 0.421875000, 0.423828125, 0.425781250, 0.427734375, 0.429687500, 0.431640625, 0.433593750, 0.435546875, 0.437500000, 0.439453125, 0.441406250, 0.443359375, 0.445312500, 0.447265625, 0.449218750, 0.451171875, 0.453125000, 0.455078125, 0.457031250, 0.458984375, 0.460937500, 0.462890625, 0.464843750, 0.466796875, 0.468750000, 0.470703125, 0.472656250, 0.474609375, 0.476562500, 0.478515625, 0.480468750, 0.482421875, 0.484375000, 0.486328125, 0.488281250, 0.490234375, 0.492187500, 0.494140625, 0.496093750, 0.498046875, 0.500000000, 0.501953125, 0.503906250, 0.505859375, 0.507812500, 0.509765625, 0.511718750, 0.513671875, 0.515625000, 0.517578125, 0.519531250, 0.521484375, 0.523437500, 0.525390625, 0.527343750, 0.529296875, 0.531250000, 0.533203125, 0.535156250, 0.537109375, 0.539062500, 0.541015625, 0.542968750, 0.544921875, 0.546875000, 0.548828125, 0.550781250, 0.552734375, 0.554687500, 0.556640625, 0.558593750, 0.560546875, 0.562500000, 0.564453125, 0.566406250, 0.568359375, 0.570312500, 0.572265625, 0.574218750, 0.576171875, 0.578125000, 0.580078125, 0.582031250, 0.583984375, 0.585937500, 0.587890625, 0.589843750, 0.591796875, 0.593750000, 0.595703125, 0.597656250, 0.599609375, 0.601562500, 0.603515625, 0.605468750, 0.607421875, 0.609375000, 0.611328125, 0.613281250, 0.615234375, 0.617187500, 0.619140625, 0.621093750, 0.623046875, 0.625000000, 0.626953125, 0.628906250, 0.630859375, 0.632812500, 0.634765625, 0.636718750, 0.638671875, 0.640625000, 0.642578125, 0.644531250, 0.646484375, 0.648437500, 0.650390625, 0.652343750, 0.654296875, 0.656250000, 0.658203125, 0.660156250, 0.662109375, 0.664062500, 0.666015625, 0.667968750, 0.669921875, 0.671875000, 0.673828125, 0.675781250, 0.677734375, 0.679687500, 0.681640625, 0.683593750, 0.685546875, 0.687500000, 0.689453125, 0.691406250, 0.693359375, 0.695312500, 0.697265625, 0.699218750, 0.701171875, 0.703125000, 0.705078125, 0.707031250, 0.708984375, 0.710937500, 0.712890625, 0.714843750, 0.716796875, 0.718750000, 0.720703125, 0.722656250, 0.724609375, 0.726562500, 0.728515625, 0.730468750, 0.732421875, 0.734375000, 0.736328125, 0.738281250, 0.740234375, 0.742187500, 0.744140625, 0.746093750, 0.748046875, 0.750000000, 0.751953125, 0.753906250, 0.755859375, 0.757812500, 0.759765625, 0.761718750, 0.763671875, 0.765625000, 0.767578125, 0.769531250, 0.771484375, 0.773437500, 0.775390625, 0.777343750, 0.779296875, 0.781250000, 0.783203125, 0.785156250, 0.787109375, 0.789062500, 0.791015625, 0.792968750, 0.794921875, 0.796875000, 0.798828125, 0.800781250, 0.802734375, 0.804687500, 0.806640625, 0.808593750, 0.810546875, 0.812500000, 0.814453125, 0.816406250, 0.818359375, 0.820312500, 0.822265625, 0.824218750, 0.826171875, 0.828125000, 0.830078125, 0.832031250, 0.833984375, 0.835937500, 0.837890625, 0.839843750, 0.841796875, 0.843750000, 0.845703125, 0.847656250, 0.849609375, 0.851562500, 0.853515625, 0.855468750, 0.857421875, 0.859375000, 0.861328125, 0.863281250, 0.865234375, 0.867187500, 0.869140625, 0.871093750, 0.873046875, 0.875000000, 0.876953125, 0.878906250, 0.880859375, 0.882812500, 0.884765625, 0.886718750, 0.888671875, 0.890625000, 0.892578125, 0.894531250, 0.896484375, 0.898437500, 0.900390625, 0.902343750, 0.904296875, 0.906250000, 0.908203125, 0.910156250, 0.912109375, 0.914062500, 0.916015625, 0.917968750, 0.919921875, 0.921875000, 0.923828125, 0.925781250, 0.927734375, 0.929687500, 0.931640625, 0.933593750, 0.935546875, 0.937500000, 0.939453125, 0.941406250, 0.943359375, 0.945312500, 0.947265625, 0.949218750, 0.951171875, 0.953125000, 0.955078125, 0.957031250, 0.958984375, 0.960937500, 0.962890625, 0.964843750, 0.966796875, 0.968750000, 0.970703125, 0.972656250, 0.974609375, 0.976562500, 0.978515625, 0.980468750, 0.982421875, 0.984375000, 0.986328125, 0.988281250, 0.990234375, 0.992187500, 0.994140625, 0.996093750, 0.998046875, 1.000000000,
    };

    REQUIRE(lookup(table, 256.) == .5);
    REQUIRE(lookup(table, 256.5) == .5009765625);
}
TEST_CASE("next powers of two are computed", "[next_power_of_two]") {
    REQUIRE(next_power_of_two(0) == 2);
    REQUIRE(next_power_of_two(1) == 2);
    REQUIRE(next_power_of_two(2) == 2);
    REQUIRE(next_power_of_two(3) == 4);
    REQUIRE(next_power_of_two(5) == 8);
    REQUIRE(next_power_of_two(9) == 16);
    REQUIRE(next_power_of_two(24) == 32);
    REQUIRE(next_power_of_two(60) == 64);
    REQUIRE(next_power_of_two(120) == 128);
    REQUIRE(next_power_of_two(129) == 256);
}
